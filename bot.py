import os
import sqlite3
import telebot
from telebot import types

# ==============================
# CONFIG
# ==============================
TOKEN = os.getenv("BOT_TOKEN",)
ADMIN_ID = 7922495578  # <-- рждрзЛржорж╛рж░ ржПржбржорж┐ржи numeric ID
bot = telebot.TeleBot(TOKEN)

# ==============================
# DATABASE
# ==============================
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id   INTEGER PRIMARY KEY,
    balance   INTEGER DEFAULT 0,
    refer_by  INTEGER,
    ref_count INTEGER DEFAULT 0,
    ref_earn  INTEGER DEFAULT 0
)
""")

# ржирж┐рж░рж╛ржкржжрзЗ (IF NOT EXISTS) ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржХрж▓рж╛ржо ржпрзЛржЧ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ тАФ ржкрзБрж░рзЛржирзЛ DB ржерж╛ржХрж▓рзЗржУ ржЪрж▓ржмрзЗ
for alter_sql in [
    "ALTER TABLE users ADD COLUMN refer_by INTEGER",
    "ALTER TABLE users ADD COLUMN ref_count INTEGER DEFAULT 0",
    "ALTER TABLE users ADD COLUMN ref_earn INTEGER DEFAULT 0"
]:
    try:
        cursor.execute(alter_sql)
    except Exception:
        pass

cursor.execute("""
CREATE TABLE IF NOT EXISTS withdraws (
    id      INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    method  TEXT,
    number  TEXT,
    amount  INTEGER,
    status  TEXT DEFAULT 'Pending'
)
""")

# ржЯрж╛рж╕рзНржХ рж╕рж╛ржмржорж┐рж╢ржирзЗрж░ ржЬржирзНржп ржЯрзЗржмрж┐рж▓
cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    id       INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id  INTEGER,
    username TEXT,
    file_id  TEXT,
    status   TEXT DEFAULT 'Pending'
)
""")

# settings ржЯрзЗржмрж┐рж▓ (task_price ржЗрждрзНржпрж╛ржжрж┐ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп)
cursor.execute("""
CREATE TABLE IF NOT EXISTS settings (
    key TEXT PRIMARY KEY,
    value TEXT
)
""")
# ржбрж┐ржлрж▓рзНржЯ task_price ржЗржирж╕рж╛рж░рзНржЯ (ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ)
cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('task_price', '7')")

conn.commit()

# ==============================
# STATE
# ==============================
withdraw_steps = {}  # {user_id: {step, method, number}}
admin_steps = {}     # {admin_id: {action, step, target_id, old_balance}}

# ==============================
# SETTINGS HELPERS
# ==============================
def get_setting(key: str, default=None):
    cursor.execute("SELECT value FROM settings WHERE key=?", (key,))
    row = cursor.fetchone()
    return row[0] if row else default

def set_setting(key: str, value: str):
    cursor.execute("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", (key, value))
    conn.commit()

# ==============================
# HELPERS
# ==============================
def send_main_menu(uid: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # ржкрзНрж░ржержо рж▓рж╛ржЗржи
    kb.add(types.KeyboardButton("ЁЯТ░ Balance"), types.KeyboardButton("ЁЯСе Refer"))
    # ржжрзНржмрж┐рждрзАрзЯ рж▓рж╛ржЗржи
    kb.add(types.KeyboardButton("ЁЯТ╡ Withdraw"))
    # рждрзГрждрзАрзЯ рж▓рж╛ржЗржи (ржирждрзБржи)
    kb.add(types.KeyboardButton("ЁЯОБ Create Gmail"), types.KeyboardButton("ЁЯТМ Support group ЁЯЫС"))
    bot.send_message(uid, "ЁЯСЛ ржорзЗржирзБ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=kb)

def send_admin_menu(uid: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("тЮХ Add Balance"), types.KeyboardButton("тЬПя╕П Set Balance"))
    kb.add(types.KeyboardButton("тЮЦ Reduce Balance"), types.KeyboardButton("ЁЯУЛ All Requests"))
    kb.add(types.KeyboardButton("ЁЯСе User List"), types.KeyboardButton("ЁЯУВ Task Requests"))
    kb.add(types.KeyboardButton("тЪЩя╕П Set Task Price"))  # ржирждрзБржи
    kb.add(types.KeyboardButton("тмЕя╕П Back"))
    bot.send_message(uid, "ЁЯФР Admin Panel:", reply_markup=kb)

def send_withdraw_card_to_admin(row):
    """row: (id, user_id, method, number, amount, status)"""
    req_id, u_id, method, number, amount, status = row
    text = (f"ЁЯЖФ {req_id} | ЁЯСд {u_id}\n"
            f"ЁЯТ│ {method} ({number})\n"
            f"ЁЯТ╡ {amount}рз│ | ЁЯУМ {status}")
    if status == "Pending":
        ikb = types.InlineKeyboardMarkup()
        ikb.add(
            types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{req_id}"),
            types.InlineKeyboardButton("тЭМ Reject",  callback_data=f"reject_{req_id}")
        )
        bot.send_message(ADMIN_ID, text, reply_markup=ikb)
    else:
        bot.send_message(ADMIN_ID, text)

def apply_ref_bonus_if_increase(target_user_id: int, delta_increase: int):
    """
    ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпржжрж┐ ржкржЬрж┐ржЯрж┐ржн ржбрзЗрж▓рзНржЯрж╛рзЯ ржмрж╛рзЬрзЗ, рждрж╛рж╣рж▓рзЗ
    рждрж╛рж░ рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ рзй% ржмрзЛржирж╛рж╕ ржжрж╛ржУред
    """
    if delta_increase <= 0:
        return
    cursor.execute("SELECT refer_by FROM users WHERE user_id=?", (target_user_id,))
    row = cursor.fetchone()
    if not row:
        return
    referrer = row[0]
    if not referrer:
        return
    bonus = int(delta_increase * 0.03)
    if bonus > 0:
        cursor.execute("UPDATE users SET balance = balance + ?, ref_earn = ref_earn + ? WHERE user_id=?",
                       (bonus, bonus, referrer))
        conn.commit()
        try:
            bot.send_message(referrer, f"ЁЯОЙ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзНржб {target_user_id} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржмрзГржжрзНржзрж┐ ржкрзЗржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржкрзЗрж▓рзЗржи {bonus}рз│ (3%)")
        except Exception:
            pass

# ==============================
# START + REFER ATTACH (updated to ensure refer works)
# ==============================
@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    user_id = message.chat.id
    # ensure user exists
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()

    # refer attach: /start <referrer_id>
    parts = message.text.split()
    if len(parts) > 1:
        try:
            referrer_id = int(parts[1])
            # ignore self-referrals
            if referrer_id != user_id:
                # ensure referrer row exists so UPDATE works
                cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (referrer_id,))
                conn.commit()

                # only attach if current user's refer_by is empty
                cursor.execute("SELECT refer_by FROM users WHERE user_id=?", (user_id,))
                ref = cursor.fetchone()
                if ref and ref[0] is None:
                    cursor.execute("UPDATE users SET refer_by=? WHERE user_id=?", (referrer_id, user_id))
                    # increment ref_count, ref_earn and give +1рз│ bonus to referrer
                    cursor.execute("""
                        UPDATE users
                        SET ref_count = COALESCE(ref_count,0) + 1,
                            ref_earn  = COALESCE(ref_earn,0) + 1,
                            balance   = COALESCE(balance,0) + 1
                        WHERE user_id=?
                    """, (referrer_id,))
                    conn.commit()
                    try:
                        bot.send_message(referrer_id, f"ЁЯОЙ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗ ржирждрзБржи ржПржХржЬржи ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗ!\nржЖржкржирж┐ ржмрзЛржирж╛рж╕ 1рз│ ржкрзЗрзЯрзЗржЫрзЗржиред")
                    except Exception:
                        pass
        except Exception:
            pass

    send_main_menu(user_id)

# ==============================
# USER BUTTONS
# ==============================
@bot.message_handler(func=lambda m: m.text == "ЁЯТ░ Balance")
def on_balance(message: types.Message):
    uid = message.chat.id
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (uid,))
    row = cursor.fetchone()
    bal = row[0] if row else 0
    bot.send_message(uid, f"ЁЯТ│ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {bal}рз│")

@bot.message_handler(func=lambda m: m.text == "ЁЯСе Refer")
def on_refer(message: types.Message):
    uid = message.chat.id
    link = f"https://t.me/{bot.get_me().username}?start={uid}"
    cursor.execute("SELECT ref_count, ref_earn FROM users WHERE user_id=?", (uid,))
    row = cursor.fetchone()
    ref_count = row[0] if row else 0
    ref_earn = row[1] if row and len(row) > 1 else 0
    bot.send_message(
        uid,
        f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржЩрзНржХ:\n{link}\n\n"
        f"ЁЯСе ржорзЛржЯ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЫрзЗ: {ref_count}\n"
        f"ЁЯТ░ рж░рзЗржлрж╛рж░ ржерзЗржХрзЗ ржЖрзЯ: {ref_earn}рз│\n\n"
        f"тЬЕ ржирж┐рзЯржо: ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзНржб ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпржЦржиржЗ ржмрж╛рзЬржмрзЗ,\n"
        f"ржЖржкржирж┐ ржкрж╛ржмрзЗржи рж╕рзЗржЗ ржмрзГржжрзНржзрж┐рж░ 3%ред\n\n"
        f"ЁЯФФ ржЪрж╛ржЗрж▓рзЗ ржкрзНрж░рждрзНржпрзЗржХ рж░рзЗржлрж╛рж░рзЗ рж╕рж░рж╛рж╕рж░рж┐ 1рз│ ржкрж╛ржиред"
    )

@bot.message_handler(func=lambda m: m.text == "ЁЯТ╡ Withdraw")
def on_withdraw(message: types.Message):
    uid = message.chat.id
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("ЁЯУ▓ Bkash"), types.KeyboardButton("ЁЯУ▓ Nagad"))
    kb.add(types.KeyboardButton("тмЕя╕П Back"))
    withdraw_steps[uid] = {"step": "method"}
    bot.send_message(uid, "ЁЯТ╡ ржХрзЛржи ржкрзЗржорзЗржирзНржЯ ржорзЗржержбрзЗ ржирж┐рждрзЗ ржЪрж╛ржи?", reply_markup=kb)

# --- Support group ---
@bot.message_handler(func=lambda m: m.text == "ЁЯТМ Support group ЁЯЫС")
def support_group(message: types.Message):
    bot.send_message(
        message.chat.id,
        "тД╣я╕П ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ рж╕рж╛ржкрзЛрж░рзНржЯ ржЧрзНрж░рзБржкрзЗ ржЬрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЗржи:\n"
        "ЁЯСЙ https://t.me/+f9tOe5fPe0Q0NGZl"
    )

# --- Create Gmail task ---
@bot.message_handler(func=lambda m: m.text == "ЁЯОБ Create Gmail")
def create_gmail(message: types.Message):
    # ржбрж╛ржЗржирж╛ржорж┐ржХ ржкрзНрж░рж╛ржЗрж╕ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ settings ржерзЗржХрзЗ
    task_price_str = get_setting("task_price", "7")
    try:
        task_price = float(task_price_str)
    except Exception:
        task_price = 7
    bot.send_message(
        message.chat.id,
        f"ЁЯТ░ржЖржкржирж┐ ржкрзНрж░рждрж┐ ржЬрж┐ржорзЗржЗрж▓ ржП ржкрж╛ржмрзЗржи : {task_price} ржЯрж╛ржХрж╛ЁЯОБ\n"
        "ЁЯУН [ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржмрзЗржи?](https://t.me/taskincometoday/16)",
        parse_mode="Markdown"
    )
    bot.send_message(message.chat.id, "ЁЯУВ ржПржЦржи ржЖржкржирж╛рж░ `.xlsx` ржлрж╛ржЗрж▓ржЯрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред")

# --- Receive .xlsx file ---
@bot.message_handler(content_types=['document'])
def handle_file(message: types.Message):
    doc = message.document
    uid = message.chat.id
    username = message.from_user.username or ""

    # .xlsx ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи (file name ржмрж╛ mime type)
    is_xlsx = False
    if doc.file_name and doc.file_name.lower().endswith(".xlsx"):
        is_xlsx = True
    elif doc.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        is_xlsx = True

    if not is_xlsx:
        bot.send_message(uid, "тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ `.xlsx` ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред")
        return

    # DB рждрзЗ ржЯрж╛рж╕рзНржХ рж╕рзЗржн
    cursor.execute(
        "INSERT INTO tasks (user_id, username, file_id, status) VALUES (?, ?, ?, 'Pending')",
        (uid, username, doc.file_id)
    )
    conn.commit()

    bot.send_message(uid, "тЬЕ ржЖржкржирж╛рж░ ржлрж╛ржЗрж▓ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржЖржорж░рж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░ржЫрж┐ред")
    # ржПржбржорж┐ржиржХрзЗ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЯ
    try:
        bot.send_message(ADMIN_ID, f"ЁЯЖХ ржирждрзБржи ржЯрж╛рж╕рзНржХ рж╕рж╛ржмржорж┐рж╢ржи\nЁЯСд User: {uid} (@{username})\nЁЯУД File: {doc.file_name}")
    except Exception:
        pass

# ==============================
# ADMIN PANEL + ITEMS
# ==============================
@bot.message_handler(commands=['admin'])
def admin_panel(message: types.Message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржиред")
        return
    send_admin_menu(message.chat.id)

@bot.message_handler(func=lambda msg: msg.text == "ЁЯУЛ All Requests" and msg.chat.id == ADMIN_ID)
def all_requests_handler(message: types.Message):
    cursor.execute("SELECT id, user_id, method, number, amount, status FROM withdraws ORDER BY id DESC LIMIT 10")
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(ADMIN_ID, "ЁЯУн ржХрзЛржирзЛ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    else:
        for row in rows:
            send_withdraw_card_to_admin(row)

@bot.message_handler(func=lambda msg: msg.text == "ЁЯСе User List" and msg.chat.id == ADMIN_ID)
def user_list_handler(message: types.Message):
    cursor.execute("SELECT COUNT(*), COALESCE(SUM(balance), 0) FROM users")
    total_users, total_balance = cursor.fetchone()
    cursor.execute("SELECT user_id, balance FROM users ORDER BY user_id DESC LIMIT 20")
    rows = cursor.fetchall()

    text = f"ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: {total_users}\nЁЯТ░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {total_balance}рз│\n\n"
    if not rows:
        text += "ЁЯУн ржПржЦржирзЛ ржХрзЛржирзЛ ржЗржЙржЬрж╛рж░ ржирзЗржЗред"
    else:
        text += "ЁЯУМ рж╕рж░рзНржмрж╢рзЗрж╖ рзирзж ржЬржи ржЗржЙржЬрж╛рж░:\n"
        for u in rows:
            text += f"ЁЯЖФ {u[0]} | ЁЯТ░ Balance: {u[1]}рз│\n"
    bot.send_message(ADMIN_ID, text)

# --- Task Requests (Admin) ---
@bot.message_handler(func=lambda msg: msg.text == "ЁЯУВ Task Requests" and msg.chat.id == ADMIN_ID)
def task_requests_handler(message: types.Message):
    # ржкрзЗржирзНржбрж┐ржВ ржЯрж╛рж╕рзНржХ рж▓рж┐рж╕рзНржЯ ржжрзЗржЦрж╛ржУ
    cursor.execute("""
        SELECT t.id, t.user_id, t.username, u.balance
        FROM tasks t
        LEFT JOIN users u ON u.user_id = t.user_id
        WHERE t.status='Pending'
        ORDER BY t.id DESC
        LIMIT 15
    """)
    rows = cursor.fetchall()

    if not rows:
        bot.send_message(ADMIN_ID, "ЁЯУн ржХрзЛржирзЛ Pending Task ржирзЗржЗред")
        return

    for tid, uid, uname, bal in rows:
        text = (f"ЁЯЧВя╕П Task #{tid}\n"
                f"ЁЯСд User: {uid} @{uname if uname else 'тАФ'}\n"
                f"ЁЯТ░ Balance: {bal if bal is not None else 0}рз│")
        ikb = types.InlineKeyboardMarkup()
        ikb.add(
            types.InlineKeyboardButton("ЁЯУе Open File", callback_data=f"topen_{tid}"),
            types.InlineKeyboardButton("тЬЕ Approve",  callback_data=f"tapprove_{tid}"),
            types.InlineKeyboardButton("тЭМ Reject",   callback_data=f"treject_{tid}")
        )
        bot.send_message(ADMIN_ID, text, reply_markup=ikb)

# ==============================
# BACK BUTTON (GLOBAL)
# ==============================
@bot.message_handler(func=lambda m: m.text == "тмЕя╕П Back")
def on_back(message: types.Message):
    uid = message.chat.id
    withdraw_steps.pop(uid, None)
    admin_steps.pop(uid, None)
    if uid == ADMIN_ID:
        send_admin_menu(uid)
    else:
        send_main_menu(uid)

# ==============================
# WITHDRAW FLOW + ADMIN FLOW (catch-all)
# ==============================
@bot.message_handler(func=lambda m: True)
def catch_all(message: types.Message):
    uid = message.chat.id
    text = message.text

    # ---------- Withdraw flow ----------
    if uid in withdraw_steps:
        step = withdraw_steps[uid]["step"]

        if step == "method":
            if text in ["ЁЯУ▓ Bkash", "ЁЯУ▓ Nagad"]:
                withdraw_steps[uid]["method"] = text
                withdraw_steps[uid]["step"] = "number"
                bot.send_message(uid, f"ЁЯУ▒ ржЖржкржирж╛рж░ {text} ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи:")
            else:
                bot.send_message(uid, "тЭМ Bkash/Nagad рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи ржмрж╛ тмЕя╕П Back ржЪрж╛ржкрзБржиред")
            return

        if step == "number":
            withdraw_steps[uid]["number"] = text
            withdraw_steps[uid]["step"] = "amount"
            bot.send_message(uid, "ЁЯТ╡ ржХржд ржЯрж╛ржХрж╛ Withdraw ржХрж░ржмрзЗржи? (рж╕рж░рзНржмржирж┐ржорзНржи 50рз│)")
            return

        if step == "amount":
            try:
                amount = int(text)
            except Exception:
                bot.send_message(uid, "тЭМ ржкрж░рж┐ржорж╛ржг рж╕ржВржЦрзНржпрж╛рзЯ ржжрж┐ржиред")
                return

            cursor.execute("SELECT balance FROM users WHERE user_id=?", (uid,))
            row = cursor.fetchone()
            balance = row[0] if row else 0

            if amount < 50:
                bot.send_message(uid, "тЪая╕П рж╕рж░рзНржмржирж┐ржорзНржи withdraw 50рз│")
            elif amount > balance:
                bot.send_message(uid, f"тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ ржпржерзЗрж╖рзНржЯ ржЯрж╛ржХрж╛ ржирзЗржЗ (ржмрж░рзНрждржорж╛ржи: {balance}рз│)")
            else:
                method = withdraw_steps[uid]["method"]
                number = withdraw_steps[uid]["number"]

                # Create request & deduct now
                cursor.execute("INSERT INTO withdraws (user_id, method, number, amount, status) VALUES (?,?,?,?, 'Pending')",
                               (uid, method, number, amount))
                cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id=?", (amount, uid))
                conn.commit()

                bot.send_message(uid, f"тЬЕ Withdraw Request рж╕рж╛ржмржорж┐ржЯ рж╣рзЯрзЗржЫрзЗ!\nЁЯТ│ {method}\nтШОя╕П {number}\nЁЯТ╡ {amount}рз│")
                # ржПржбржорж┐ржиржХрзЗ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЯ
                try:
                    bot.send_message(ADMIN_ID, f"ЁЯФФ ржирждрзБржи Withdraw Request:\nЁЯСд {uid}\nЁЯТ│ {method} ({number})\nЁЯТ╡ {amount}рз│")
                except Exception:
                    pass

            withdraw_steps.pop(uid, None)
            return

    # ---------- Admin flow ----------
    if uid == ADMIN_ID:
        # Add
        if text == "тЮХ Add Balance":
            admin_steps[uid] = {"action": "add", "step": "userid"}
            bot.send_message(uid, "ЁЯОп ржЗржЙржЬрж╛рж░рзЗрж░ ID ржжрж┐ржи:")
            return

        if admin_steps.get(uid, {}).get("action") == "add":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text)
                    admin_steps[uid]["target_id"] = target
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, "ЁЯТ╡ ржХржд ржЯрж╛ржХрж╛ ржпрзЛржЧ ржХрж░ржмрзЗржи?")
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ ржЗржЙржЬрж╛рж░ ID ржжрж┐ржиред")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    amount = int(text)
                    target = admin_steps[uid]["target_id"]
                    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, target))
                    conn.commit()
                    # рж░рзЗржлрж╛рж░ ржмрзЛржирж╛рж╕: increase = amount
                    apply_ref_bonus_if_increase(target, amount)
                    bot.send_message(uid, f"тЬЕ {target} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ {amount}рз│ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред")
                    try:
                        bot.send_message(target, f"ЁЯОЙ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ {amount}рз│ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
                admin_steps.pop(uid, None)
                return

        # Set
        if text == "тЬПя╕П Set Balance":
            admin_steps[uid] = {"action": "set", "step": "userid"}
            bot.send_message(uid, "ЁЯОп ржЗржЙржЬрж╛рж░рзЗрж░ ID ржжрж┐ржи:")
            return

        if admin_steps.get(uid, {}).get("action") == "set":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text)
                    admin_steps[uid]["target_id"] = target
                    cursor.execute("SELECT balance FROM users WHERE user_id=?", (target,))
                    row = cursor.fetchone()
                    old_balance = row[0] if row else 0
                    admin_steps[uid]["old_balance"] = old_balance
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, f"ЁЯТ╡ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржд рж╣ржмрзЗ? (ржмрж░рзНрждржорж╛ржи {old_balance}рз│)")
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ ржЗржЙржЬрж╛рж░ ID ржжрж┐ржиред")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    new_amount = int(text)
                    target = admin_steps[uid]["target_id"]
                    old_balance = admin_steps[uid]["old_balance"]
                    cursor.execute("UPDATE users SET balance = ? WHERE user_id=?", (new_amount, target))
                    conn.commit()
                    # рж░рзЗржлрж╛рж░ ржмрзЛржирж╛рж╕: increase = max(new-old, 0)
                    delta = new_amount - old_balance
                    apply_ref_bonus_if_increase(target, delta)
                    bot.send_message(uid, f"тЬЕ {target} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ {new_amount}рз│ ржП рж╕рзЗржЯ рж╣рзЯрзЗржЫрзЗред")
                    try:
                        bot.send_message(target, f"тЪая╕П ржЕрзНржпрж╛ржбржорж┐ржи ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж╕рзЗржЯ ржХрж░рзЗржЫрзЗ: {new_amount}рз│")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
                admin_steps.pop(uid, None)
                return

        # Reduce
        if text == "тЮЦ Reduce Balance":
            admin_steps[uid] = {"action": "reduce", "step": "userid"}
            bot.send_message(uid, "ЁЯОп ржЗржЙржЬрж╛рж░рзЗрж░ ID ржжрж┐ржи:")
            return

        if admin_steps.get(uid, {}).get("action") == "reduce":
            if admin_steps[uid]["step"] == "userid":
                try:
                    target = int(text)
                    admin_steps[uid]["target_id"] = target
                    admin_steps[uid]["step"] = "amount"
                    bot.send_message(uid, "ЁЯТ╡ ржХржд ржЯрж╛ржХрж╛ ржХржорж╛ржмрзЗржи?")
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ ржЗржЙржЬрж╛рж░ ID ржжрж┐ржиред")
                return
            elif admin_steps[uid]["step"] == "amount":
                try:
                    amount = int(text)
                    target = admin_steps[uid]["target_id"]
                    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id=?", (amount, target))
                    conn.commit()
                    bot.send_message(uid, f"тЬЕ {target} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерзЗржХрзЗ {amount}рз│ ржХрзЗржЯрзЗ ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")
                    try:
                        bot.send_message(target, f"тЪая╕П ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерзЗржХрзЗ {amount}рз│ ржХржорж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
                    except Exception:
                        pass
                except Exception:
                    bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
                admin_steps.pop(uid, None)
                return

        # --- NEW: Set Task Price via Admin Panel ---
        if text == "тЪЩя╕П Set Task Price":
            admin_steps[uid] = {"action": "set_task_price", "step": "ask"}
            current = get_setting("task_price", "7")
            bot.send_message(uid, f"ЁЯЫая╕П ржмрж░рзНрждржорж╛ржи ржЯрж╛рж╕рзНржХ ржкрзНрж░рж╛ржЗрж╕ {current}рз│\nржирждрзБржи ржкрзНрж░рж╛ржЗрж╕ рж▓рж┐ржЦрзБржи:")
            return

        if admin_steps.get(uid, {}).get("action") == "set_task_price":
            try:
                new_price = float(text)
                if new_price < 0:
                    raise ValueError("negative")
                set_setting("task_price", str(new_price))

                bot.send_message(uid, f"тЬЕ ржЯрж╛рж╕рзНржХ ржкрзНрж░рж╛ржЗрж╕ ржПржЦржи {new_price}рз│ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
            except Exception:
                bot.send_message(uid, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред (ржЙржжрж╛рж╣рж░ржг: 7)")
            admin_steps.pop(uid, None)
            return

# ==============================
# WITHDRAW APPROVE / REJECT (INLINE)
# ==============================
@bot.callback_query_handler(func=lambda c: c.data.startswith("approve_") or c.data.startswith("reject_") or
                                      c.data.startswith("tapprove_") or c.data.startswith("treject_") or
                                      c.data.startswith("topen_"))
def on_inline_decision(call: types.CallbackQuery):
    # рж╢рзБржзрзБ ржПржбржорж┐ржи
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "ржЕржирзБржорждрж┐ ржирзЗржЗ")
        return

    data = call.data

    # ---- Withdraw decisions ----
    if data.startswith("approve_") or data.startswith("reject_"):
        action, req_id_str = data.split("_", 1)
        try:
            req_id = int(req_id_str)
        except Exception:
            bot.answer_callback_query(call.id, "ржнрзБрж▓ ID")
            return

        cursor.execute("SELECT user_id, amount, status FROM withdraws WHERE id=?", (req_id,))
        row = cursor.fetchone()
        if not row:
            bot.answer_callback_query(call.id, "рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐")
            return

        u_id, amount, status = row
        if status != "Pending":
            bot.answer_callback_query(call.id, "ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ рж╣рзЯрзЗржЫрзЗ")
            return

        if action == "approve":
            # already deducted at request time тЖТ only mark approved
            cursor.execute("UPDATE withdraws SET status='Approved' WHERE id=?", (req_id,))
            conn.commit()
            try:
                bot.send_message(u_id, f"тЬЕ ржЖржкржирж╛рж░ Withdraw Request {amount}рз│ Approved рж╣рзЯрзЗржЫрзЗ!")
            except Exception:
                pass
            try:
                bot.edit_message_text(f"ЁЯЖФ {req_id} Withdraw Approved тЬЕ",
                                      chat_id=call.message.chat.id, message_id=call.message.message_id)
            except Exception:
                pass
            bot.answer_callback_query(call.id, "Approved тЬЕ")

        elif action == "reject":
            # refund amount (we deducted previously)
            cursor.execute("UPDATE withdraws SET status='Rejected' WHERE id=?", (req_id,))
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, u_id))
            conn.commit()
            try:
                bot.send_message(u_id, f"тЭМ ржЖржкржирж╛рж░ Withdraw Request {amount}рз│ Rejected рж╣рзЯрзЗржЫрзЗред ржЯрж╛ржХрж╛ ржлрзЗрж░ржд ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")
            except Exception:
                pass
            try:
                bot.edit_message_text(f"ЁЯЖФ {req_id} Withdraw Rejected тЭМ",
                                      chat_id=call.message.chat.id, message_id=call.message.message_id)
            except Exception:
                pass
            bot.answer_callback_query(call.id, "Rejected тЭМ")
        return

    # ---- Task requests (open / approve / reject) ----
    if data.startswith("topen_"):
        tid = int(data.split("_", 1)[1])
        cursor.execute("SELECT file_id FROM tasks WHERE id=?", (tid,))
        r = cursor.fetchone()
        if not r:
            bot.answer_callback_query(call.id, "ржлрж╛ржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐")
            return
        file_id = r[0]
        try:
            bot.send_document(ADMIN_ID, file_id, caption=f"ЁЯЧВя╕П Task #{tid} file")
        except Exception:
            pass
        bot.answer_callback_query(call.id, "ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЛ")
        return

    if data.startswith("tapprove_") or data.startswith("treject_"):
        is_approve = data.startswith("tapprove_")
        tid = int(data.split("_", 1)[1])

        cursor.execute("SELECT user_id, status FROM tasks WHERE id=?", (tid,))
        row = cursor.fetchone()
        if not row:
            bot.answer_callback_query(call.id, "ржЯрж╛рж╕рзНржХ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐")
            return

        u_id, status = row
        if status != "Pending":
            bot.answer_callback_query(call.id, "ржЗрждрж┐ржоржзрзНржпрзЗ ржкрзНрж░рж╕рзЗрж╕ рж╣рзЯрзЗржЫрзЗ")
            return

        new_status = "Approved" if is_approve else "Rejected"
        cursor.execute("UPDATE tasks SET status=? WHERE id=?", (new_status, tid))
        conn.commit()

        # ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ (ржХрзЛржирзЛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЕржЯрзЛ-ржЪрзЗржЮрзНржЬ ржирзЗржЗ)
        try:
            if is_approve:
                bot.send_message(u_id, "тЬЕ ржЖржкржирж╛рж░ Gmail ржЕрзНржпрж╛ржкрзНрж░рзБржн рж╣рзЯрзЗржЫрзЗред ржЖржкржирж╛рж░ Report ржХрж╛ржЙржирзНржЯ ржХрж░рзЗ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рж╛ржирзНрж╕ ржпрзБржХрзНржд рж╣рзЯрзЗ ржпрж╛ржмрзЗ ржзржирзНржпржмрж╛ржж!")
            else:
                bot.send_message(u_id, "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ Gmail рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        except Exception:
            pass

        # ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ
        try:
            bot.edit_message_text(f"ЁЯЧВя╕П Task #{tid} тЖТ {new_status}",
                                  chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception:
            pass

        bot.answer_callback_query(call.id, f"{new_status} тЬЕ" if is_approve else f"{new_status} тЭМ")
        return

# ==============================
# RUN
# ==============================
if __name__ == "__main__":
    print("ЁЯдЦ Bot is running...")
    bot.infinity_polling()

